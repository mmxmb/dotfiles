" {{{ Vundle settings

filetype off                      " Disable filetype detection; required by Vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

Plugin 'VundleVim/Vundle.vim'     " let Vundle manage Vundle, required
Plugin 'scrooloose/nerdtree'      " Filesystem explorer
Plugin 'scrooloose/nerdcommenter' " Commenting shortcuts
Plugin 'vimwiki/vimwiki'          " My own wiki
Plugin 'sjl/gundo.vim'            " Graphical undo tree
Plugin 'junegunn/fzf.vim'         " FZF inside vim

" All of Plugins must be added before the following line
call vundle#end()                 " required
filetype on                       " Filetype detection (required by language specific plugins)
filetype plugin on                " Load filetype-specific plugin files (ftplugin.vim)
filetype indent on                " Load filetype-specific indent files (indent.vim)

" }}}

" {{{ Leader settings

" These settings must appear before any nmap that uses <leader>
let mapleader=","              " Make comma the leader
set timeoutlen=250             " Set leader sequence timeout (ms)

" }}}

" {{{ Spaces and Tabs

set expandtab                  " Tabs are spaces
set shiftwidth=2               " Indentation amount when using < and >  
set tabstop=2                  " Number of visual spaces per TAB
set softtabstop=2              " Number of spaces in tab when editing
set smartindent                " Smart indentation when creating a newline

" Golang
autocmd FileType go setlocal shiftwidth=8 tabstop=8 softtabstop=8 noexpandtab

" }}}

" {{{ Search

set incsearch                  " Search as characters are entered
set hlsearch                   " Highlight matches
" Turn off search highlight
nmap <leader><space> :nohlsearch<CR>
" Enable fzf as vim plugin
" https://github.com/junegunn/fzf/blob/master/README-VIM.md
set rtp+=/usr/local/opt/fzf
" Search for file with fzf in cwd
nmap <C-h> :Files<CR>
" Search for content inside files
nmap <C-g> :Rg<Cr>

" }}}

" {{{ UI

set number                     " Show current line number
set relativenumber             " Show relative line numbers
set ruler 		                 " Show ruler at the lower right corner
set colorcolumn=100            " Show color column to limit line length
set cursorline                 " Highlight current line
if !exists("g:syntax_on")      " Set syntax highlighting if not set
    syntax enable
endif

" }}}

" {{{ Syntax

filetype plugin indent on

" }}}

" {{{ Movement

set mouse=nicr                 " Can use mouse for navigation
" Newline below current line
nmap oo o<Esc>k
" Newline above current line
nmap OO O<Esc>j
" Remap diary to leader-dd
nmap <Leader>dd :Diary<CR>

" }}}

" {{{ Copy-Paste
"
" Toggle between paste-nopaste
nmap <Leader>pp :set paste! paste?<CR>
" }}}

" {{{ Backups and undo

" Protect changes between writes. Default values of
" updatecount (200 keystrokes) and updatetime
" (4 seconds) are fine
set swapfile
set directory^=~/.vim/swap//

" protect against crash-during-write
set writebackup
" but do not persist backup after successful write
set nobackup
" use rename-and-write-new method whenever safe
set backupcopy=auto
" patch required to honor double slash at end
if has("patch-8.1.0251")
	" consolidate the writebackups -- not a big
	" deal either way, since they usually get deleted
	set backupdir^=~/.vim/backup//
end

" persist the undo tree for each file
"set undofile
set undodir^=~/.vim/undo//

" toggle gundo (super undo) https://sjl.bitbucket.io/gundo.vim/#installation
nmap <leader>u :GundoToggle<CR>

" }}}

" {{{ NERDTree settings

" More convenient NERDTree acccess
nmap <Leader>nn :NERDTree<CR> 
" Easier navigation between splits 
nmap <C-J> <C-W><C-J>
nmap <C-K> <C-W><C-K>
nmap <C-L> <C-W><C-L>
nmap <C-H> <C-W><C-H>

" }}}

" {{{ VimWiki settings

" Use markdown in vimwiki and change extension
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

" Open vimwiki diary index using Diary command and auto generate entries list
command! Diary VimwikiDiaryIndex
augroup vimwikigroup
    autocmd!
    " automatically update links when opening diary index
    autocmd BufRead,BufNewFile diary.wiki VimwikiDiaryGenerateLinks
augroup end

" }}}

set modelines=1
" vim:foldmethod=marker:foldlevel=0

